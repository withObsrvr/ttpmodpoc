plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
	id 'com.google.protobuf' version '0.9.4'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// gRPC dependencies
	implementation 'io.grpc:grpc-netty-shaded:1.61.0'
	implementation 'io.grpc:grpc-protobuf:1.61.0'
	implementation 'io.grpc:grpc-stub:1.61.0'
	implementation 'com.google.protobuf:protobuf-java:4.28.2'
	implementation 'javax.annotation:javax.annotation-api:1.3.2'

	implementation 'com.google.guava:guava:32.1.3-jre'
	
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}

	exclude '**/*.proto' // Exclude all .proto files from being treated as resources
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}

	exclude 'oshi.properties'
	exclude 'oshi.architecture.properties'
}

// Disable the standard jar task, as shadowJar produces the final artifact
tasks.jar.enabled = false

shadowJar {
	archiveClassifier.set('') // Don't append 'all' or 'shadow' to the JAR name
	mergeServiceFiles() // Needed for gRPC/Protobuf service discovery
	zip64 = true // Good practice for large JARs

	// Exclude signature files
	exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'

	// Exclude OSHI again just to be safe
	exclude 'oshi.properties', 'oshi.architecture.properties'

	// Relocate packages to avoid conflicts with other mods or Minecraft internals
	relocate 'io.grpc', 'net.obsrvr.ttpmodpoc.shaded.io.grpc'
	relocate 'com.google.protobuf', 'net.obsrvr.ttpmodpoc.shaded.com.google.protobuf'
	relocate 'javax.annotation', 'net.obsrvr.ttpmodpoc.shaded.javax.annotation'
	relocate 'com.google.common', 'net.obsrvr.ttpmodpoc.shaded.com.google.common' // Relocate Guava too
	// Add other relocations if needed for transitive dependencies
}
// Ensure the 'build' task depends on 'shadowJar'
tasks.named('build') {

}
// Standard Gradle source set configuration
sourceSets {
	main {
		proto { // The plugin adds this 'proto' source directory set automatically
			srcDirs 'src/main/proto'
		}
		// java { srcDirs 'src/main/java' } // Usually default
		// resources { srcDirs 'src/main/resources' } // Usually default
	}
}

protobuf {
	protoc { artifact = "com.google.protobuf:protoc:3.25.1" } // Match implementation version if possible
	plugins {
		grpc { artifact = 'io.grpc:protoc-gen-grpc-java:1.61.0' } // Match implementation version
	}
	generateProtoTasks {
		all()*.plugins { grpc {} }
		// Configure where the generated Java code goes
		all()*.builtins {
			java { } // Use 'lite' if you don't need full runtime, usually fine for clients
		}
		all()*.generateDescriptorSet = true // Optional but can be useful
	}

}



// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

